View(SL_distance_tf)
class(SL_distance_tf)
class(SL_distance.df)
SL_distance_df = do.call(rbind,do.call(rbind, SL_distance_tf))
class(SL_distance_df)
SL_distance_df =
dplyr::mutate(data.frame(SL_distance_df),
dist_length=
as.numeric(.data$distance)*
as.numeric(.data$Length))
SL_distance_df
SL_distance_df = do.call(rbind,do.call(rbind, SL_distance_tf))
SL_distance_df = data.frame(
do.call(rbind,do.call(rbind, SL_distance_tf)))
SL_distance_df =
dplyr::mutate(SL_distance_df,
dist_length=
as.numeric(.data$distance)*
as.numeric(.data$Length))
class(SL_distance_df)
View(SL_distance_df)
colname(SL_distance_df)
colnames(SL_distance_df)
SL_distance_df =
do.call(rbind,do.call(rbind, SL_distance_tf))
View(SL_distance_df)
SL_distance_tf = list()
for (pred_tf in tfs) {
ploidies.dominators =
(pred_tf*ploidies + 2*(1-pred_tf))
SL.expected.mat = sapply(ploidies.dominators, function(ploidies.dominator){
SL.expected =
SLref*(pred_tf*CVs + 2*(1-pred_tf))/ploidies.dominator
})
distances.list = apply(SL.expected.mat, 2, function(SL.expecteds){
distances.lst =
lapply(SL.expecteds, function(x){
abs(x - segmentation_SLRatio$SLRatio_median)
})
})
distance_mat = sapply(distances.list, function(x){
distance.mat = do.call(rbind,x)
min_distances_order = apply(distance.mat, 2, order)
distance_vec = apply(distance.mat, 2, min)
})
predicted_CNV_mat = sapply(distances.list, function(x){
distance.mat = do.call(rbind,x)
min_distances_order = apply(distance.mat, 2, order)
return(CVs[min_distances_order[1,]])
})
predicted_CNV_df = data.frame(predicted_CNV_mat)
colnames(predicted_CNV_df) = ploidies
SL_distance.df = apply(distance_mat, 2, function(distance_vec){
predicted_CNV_df = data.frame(
Chromosome = as.character(
segmentation_SLRatio$segment_grange.seqnames),
Start = as.numeric(
segmentation_SLRatio$segment_grange.start),
End = as.numeric(
segmentation_SLRatio$segment_grange.end),
Length=as.numeric(
segmentation_SLRatio$segment_grange.width),
tf=pred_tf,
distance = distance_vec,
stringsAsFactors = FALSE)
# SLexp = SLexp[which(distances_corrected==min_distance)],stringsAsFactors = FALSE)
return(predicted_CNV_df)
})
SL_distance.df = do.call(rbind,SL_distance.df)
SL_distance.df$predicted_CNV =
unlist(predicted_CNV_df[,c(as.character(ploidies))],
use.names = FALSE)
SL_distance.df$ploidy =
sort(rep(ploidies,nrow(sample_segmentation)))
SL_distance_tf[[as.character(pred_tf)]] = SL_distance.df
}
View(SL_distance_tf)
SL_distance_df = do.call(rbind, SL_distance_tf)
View(SL_distance_df)
class(SL_distance_df)
SL_distance_df =
dplyr::mutate(SL_distance_df,
dist_length=
as.numeric(.data$distance)*
as.numeric(.data$Length))
ploidy_tf_mat =
dplyr::group_by(SL_distance_df,
.data$ploidy,.data$tf) %>%
dplyr::summarise(average_distance=
sum(.data$dist_length)/
sum(as.numeric(.data$Length))) %>%
dplyr::arrange(.data$average_distance)
ploidy_tf_mat =
dplyr::mutate(ploidy_tf_mat,
rounded_ploidy = round(.data$ploidy))
summarised_solution =
dplyr::group_by(ploidy_tf_mat, .data$rounded_ploidy) %>%
dplyr::summarise(distance=min(.data$average_distance)) %>%
dplyr::inner_join(ploidy_tf_mat,
by = c("rounded_ploidy"="rounded_ploidy",
"distance"="average_distance"))
summarised_solution$rank = rank(summarised_solution$distance)
summarised_solution = summarised_solution %>%
dplyr::arrange(rank)
View(summarised_solution)
solution_list =
setNames(split(summarised_solution,
seq(nrow(summarised_solution))),
summarised_solution$rank)
segment_by_solution_list[["per_bin_profile"]] = sample_zscore
segment_by_solution_list =
lapply(solution_list,get_segment_bysolution,
sample_segmentation = sample_segmentation,
SL_distance_df = SL_distance_df)
#' Return CNV segmentation result from given all CNV solutions
#'
#' @param solution solution dataframe
#' @param sample_segmentation Segmeantion dataframe
#' @param SL_distance_df Distance matrix
#'
#' @return list of segmentation per solution
#'
#' @importFrom PSCBS ploidy
get_segment_bysolution <- function(solution,
sample_segmentation,
SL_distance_df){
temp_solution_df =
dplyr::filter(SL_distance_df, .data$tf==solution$tf,
ploidy==solution$ploidy)
solution_segment_df =
dplyr::inner_join(sample_segmentation,
temp_solution_df,
by=c("chromosome"="Chromosome",
"start"="Start","end"="End")) %>%
dplyr::select(-c("tf","ploidy"))
solution_vec = c("TF"=solution$tf,
"rounded_ploidy"=solution$rounded_ploidy,
"ploidy"=solution$ploidy,
"distance"=solution$distance,
"rank"=solution$rank)
solution_list = list(cnv_solution = solution_vec,
solution_segmentation = solution_segment_df)
return(solution_list)
}
segment_by_solution_list =
lapply(solution_list,get_segment_bysolution,
sample_segmentation = sample_segmentation,
SL_distance_df = SL_distance_df)
segment_by_solution_list[["per_bin_profile"]] = sample_zscore
segment_by_solution_list[["ploidy_tf_mat"]] = ploidy_tf_mat
View(segment_by_solution_list)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align = "center")
# knitr::opts_chunk$set(dev = 'pdf')
library(cfdnakit)
example_RDS="example_patientcfDNA.RDS"
example_RDS_file =
system.file("extdata",example_RDS,
package = "cfdnakit")
sample_bins = readRDS(example_RDS_file)
plot_fragment_dist(list("Patient.1"=sample_bins))
control_rds="BH01_chr15.RDS"
control_RDS_file =
system.file("extdata",control_rds,
package = "cfdnakit")
control_bins =
readRDS(control_RDS_file)
comparing_list = list("Healthy.cfDNA"=control_bins,
"Patient.1"=sample_bins)
plot_fragment_dist(comparing_list)
sample_profile =
get_fragment_profile(sample_bins,
sample_id = "Patient.1")
sample_profile$sample_profile
# plot_isize_distribution(sample_profile)
plot_sl_ratio(sample_profile,ylim = c(0.25,1.75))
saveRDS(sample_profile,
file = "~/plasma.exmple.RDS")
path_to_PoN_txt = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/reference_healthy.listfile"
#
create_PoN(path_to_PoN_txt,
file = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/reference_healthy.rds")
PoN_rdsfile = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/PoN_fragment_profiles.rds"
sample_zscore = get_zscore_profile(sample_profile,PoN_rdsfile)
sample_zscore_segment = segmentByPSCB(sample_zscore)
plot_transformed_sl(sample_zscore,sample_zscore_segment)
sample_cnv = call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
call_cnv_temp <- function(sample_segmentation, sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3){
tfs = seq(tfs[1],tfs[2],by = 0.01)
ploidies = seq(ploidies[1],ploidies[2],by=0.05)
CVs=seq(0,MaxCN)
sample_segmentation =
dplyr::filter(sample_segmentation,
.data$chromosome %in% callChr)
sample_zscore = dplyr::filter(sample_zscore,
.data$chrom %in% callChr)
segment_grange = GenomicRanges::GRanges(
seqnames=sample_segmentation$chromosome,
IRanges(start = sample_segmentation$start,
end = sample_segmentation$end),
segment_mean= sample_segmentation$mean)
SLRatio_zscore_grange = GenomicRanges::GRanges(
seqnames = sample_zscore$chrom,
IRanges(start = sample_zscore$start,
end = sample_zscore$end),
SLRatio=sample_zscore$SLRatio.corrected)
overlapping_seg =
mergeByOverlaps(segment_grange, SLRatio_zscore_grange)
overlapping_seg = as.data.frame(overlapping_seg)
segmentation_SLRatio = overlapping_seg %>%
dplyr::group_by(.data$segment_grange.seqnames,
.data$segment_grange.start,
.data$segment_grange.end,
.data$segment_grange.width,
.data$segment_mean) %>%
dplyr::summarise(SLRatio_median=
median(.data$SLRatio,na.rm=TRUE))
SLref = median(segmentation_SLRatio$SLRatio_median,na.rm=TRUE)
SL_distance_tf = list()
for (pred_tf in tfs) {
ploidies.dominators =
(pred_tf*ploidies + 2*(1-pred_tf))
SL.expected.mat = sapply(ploidies.dominators, function(ploidies.dominator){
SL.expected =
SLref*(pred_tf*CVs + 2*(1-pred_tf))/ploidies.dominator
})
distances.list = apply(SL.expected.mat, 2, function(SL.expecteds){
distances.lst =
lapply(SL.expecteds, function(x){
abs(x - segmentation_SLRatio$SLRatio_median)
})
})
distance_mat = sapply(distances.list, function(x){
distance.mat = do.call(rbind,x)
min_distances_order = apply(distance.mat, 2, order)
distance_vec = apply(distance.mat, 2, min)
})
predicted_CNV_mat = sapply(distances.list, function(x){
distance.mat = do.call(rbind,x)
min_distances_order = apply(distance.mat, 2, order)
return(CVs[min_distances_order[1,]])
})
predicted_CNV_df = data.frame(predicted_CNV_mat)
colnames(predicted_CNV_df) = ploidies
SL_distance.df = apply(distance_mat, 2, function(distance_vec){
predicted_CNV_df = data.frame(
Chromosome = as.character(
segmentation_SLRatio$segment_grange.seqnames),
Start = as.numeric(
segmentation_SLRatio$segment_grange.start),
End = as.numeric(
segmentation_SLRatio$segment_grange.end),
Length=as.numeric(
segmentation_SLRatio$segment_grange.width),
tf=pred_tf,
distance = distance_vec,
stringsAsFactors = FALSE)
# SLexp = SLexp[which(distances_corrected==min_distance)],stringsAsFactors = FALSE)
return(predicted_CNV_df)
})
SL_distance.df = do.call(rbind,SL_distance.df)
SL_distance.df$predicted_CNV =
unlist(predicted_CNV_df[,c(as.character(ploidies))],
use.names = FALSE)
SL_distance.df$ploidy =
sort(rep(ploidies,nrow(sample_segmentation)))
SL_distance_tf[[as.character(pred_tf)]] = SL_distance.df
}
SL_distance_df = do.call(rbind, SL_distance_tf)
SL_distance_df =
dplyr::mutate(SL_distance_df,
dist_length=
as.numeric(.data$distance)*
as.numeric(.data$Length))
ploidy_tf_mat =
dplyr::group_by(SL_distance_df,
.data$ploidy,.data$tf) %>%
dplyr::summarise(average_distance=
sum(.data$dist_length)/
sum(as.numeric(.data$Length))) %>%
dplyr::arrange(.data$average_distance)
ploidy_tf_mat =
dplyr::mutate(ploidy_tf_mat,
rounded_ploidy = round(.data$ploidy))
summarised_solution =
dplyr::group_by(ploidy_tf_mat, .data$rounded_ploidy) %>%
dplyr::summarise(distance=min(.data$average_distance)) %>%
dplyr::inner_join(ploidy_tf_mat,
by = c("rounded_ploidy"="rounded_ploidy",
"distance"="average_distance"))
summarised_solution$rank = rank(summarised_solution$distance)
summarised_solution = summarised_solution %>%
dplyr::arrange(rank)
solution_list =
setNames(split(summarised_solution,
seq(nrow(summarised_solution))),
summarised_solution$rank)
segment_by_solution_list =
lapply(solution_list,get_segment_bysolution,
sample_segmentation = sample_segmentation,
SL_distance_df = SL_distance_df)
segment_by_solution_list[["per_bin_profile"]] = sample_zscore
segment_by_solution_list[["ploidy_tf_mat"]] = ploidy_tf_mat
return(segment_by_solution_list)
}
sample_cnv_2 = call_cnv_temp(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
#' Return CNV segmentation result from given all CNV solutions
#'
#' @param solution solution dataframe
#' @param sample_segmentation Segmeantion dataframe
#' @param SL_distance_df Distance matrix
#'
#' @return list of segmentation per solution
#'
#' @importFrom PSCBS ploidy
get_segment_bysolution <- function(solution,
sample_segmentation,
SL_distance_df){
temp_solution_df =
dplyr::filter(SL_distance_df, .data$tf==solution$tf,
ploidy==solution$ploidy)
solution_segment_df =
dplyr::inner_join(sample_segmentation,
temp_solution_df,
by=c("chromosome"="Chromosome",
"start"="Start","end"="End")) %>%
dplyr::select(-c("tf","ploidy"))
solution_vec = c("TF"=solution$tf,
"rounded_ploidy"=solution$rounded_ploidy,
"ploidy"=solution$ploidy,
"distance"=solution$distance,
"rank"=solution$rank)
solution_list = list(cnv_solution = solution_vec,
solution_segmentation = solution_segment_df)
return(solution_list)
}
sample_cnv_2 = call_cnv_temp(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
sample_cnv = call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
system.time(sample_cnv = call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
)
system.time(call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
)
system.time( call_cnv_temp(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
)
View(sample_cnv)
View(sample_cnv_2)
system.time(call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.05,0.4),
ploidies = c(2,3),
MaxCN=3)
)
system.time( call_cnv_temp(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.05,0.4),
ploidies = c(2,3),
MaxCN=3)
)
plot_distance_matrix(sample_cnv_2)
plot_distance_matrix(sample_cnv)
plot_distance_matrix(sample_cnv_2)
solution_table = get_solution_table(sample_cnv)
solution_table
system.time(call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0,0.8),
ploidies = c(1.5,4),
MaxCN=4)
)
system.time( call_cnv_temp(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0,0.8),
ploidies = c(1.5,4),
MaxCN=4)
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.align = "center")
# knitr::opts_chunk$set(dev = 'pdf')
library(cfdnakit)
example_RDS="example_patientcfDNA.RDS"
example_RDS_file =
system.file("extdata",example_RDS,
package = "cfdnakit")
sample_bins = readRDS(example_RDS_file)
plot_fragment_dist(list("Patient.1"=sample_bins))
control_rds="BH01_chr15.RDS"
control_RDS_file =
system.file("extdata",control_rds,
package = "cfdnakit")
control_bins =
readRDS(control_RDS_file)
comparing_list = list("Healthy.cfDNA"=control_bins,
"Patient.1"=sample_bins)
plot_fragment_dist(comparing_list)
sample_profile =
get_fragment_profile(sample_bins,
sample_id = "Patient.1")
sample_profile$sample_profile
# plot_isize_distribution(sample_profile)
plot_sl_ratio(sample_profile,ylim = c(0.25,1.75))
saveRDS(sample_profile,
file = "~/plasma.exmple.RDS")
path_to_PoN_txt = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/reference_healthy.listfile"
#
create_PoN(path_to_PoN_txt,
file = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/reference_healthy.rds")
PoN_rdsfile = "/omics/odcf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/processing_scripts/cfdnakit_script/PoN_fragment_profiles.rds"
sample_zscore = get_zscore_profile(sample_profile,PoN_rdsfile)
sample_zscore_segment = segmentByPSCB(sample_zscore)
plot_transformed_sl(sample_zscore,sample_zscore_segment)
sample_cnv = call_cnv(sample_zscore_segment,
sample_zscore,
callChr=seq_len(22),
tfs = c(0.1,0.2),
ploidies = c(2,3),
MaxCN=3)
plot_distance_matrix(sample_cnv)
solution_table = get_solution_table(sample_cnv)
solution_table
plot_cnv_solution(sample_cnv,selected_solution = 1)
calculate_CPA_score(sample_zscore_segment)
getwd()
BiocCheck::BiocCheck('new-package'=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(cfdnakit)
BH01_downsampleing = cfdnakit::read_bamfile(input.bam)
input.bam = "/omics/groups/OE0436/internal/puranach/ctDNA/1_alignment/BH01/BH01_rmdup_paired_mapped_0.01.bam"
BH01_downsampleing = cfdnakit::read_bamfile(input.bam)
BH01_downsampleing_profile = get_fragment_profile(BH01_downsampleing)
BH01_downsampleing_profile =
get_fragment_profile(BH01_downsampleing,
sample_id = "BH01")
input.bam = "/omics/groups/OE0436/internal/puranach/ctDNA/1_alignment/BH01/BH01_rmdup_paired_mapped_downsampled_chr15.0.1.bam"
BH01_downsampleing = cfdnakit::read_bamfile(input.bam)
BH01_downsampleing = cfdnakit::read_bamfile(input.bam)
BH01_downsampleing_profile =
get_fragment_profile(BH01_downsampleing,
sample_id = "BH01")
plot_fragment_dist(list(
"BH01"=BH01_downsampleing_profile))
plot_fragment_dist(list(
"BH01"=BH01_downsampleing))
saveRDS(BH01_downsampleing,file = "BH01_rmdup_paired_mapped_downsampled_chr15.0.1.RDS")
getwd()
input.bam = system.file("extdata","ex.plasma.bam",
package = "cfdnakit")
input.bam
patient_downsampleing = cfdnakit::read_bamfile(input.bam)
patient_downsampleing_profile =
get_fragment_profile(patient_downsampleing,
sample_id = "plasma1")
plot_fragment_dist(list("plasma1"=patient_downsampleing_profile))
plot_fragment_dist(list("plasma1"=patient_downsampleing))
plot_fragment_dist(list("plasma1"=patient_downsampleing,
"BH01"=BH01_downsampleing))
saveRDS(patient_downsampleing,
file = "/omics/groups/OE0436/internal/puranach/ctDNA/RStudioServer_Project/cfdnakit/inst/extdata/example_patientcfDNA.2.RDS")
plot_sl_ratio(patient_downsampleing_profile)
BiocCheck::BiocCheck()
BiocManager::install(version = "devel")
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install(version = "devel")
BiocManager::install(version = "devel")
BiocManager::version()
BiocManager::install(version = "devel")
getwd()
gewd()
getwd()
