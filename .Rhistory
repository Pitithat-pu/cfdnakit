stats::setNames()
utils.unlist <- function (x){
## do.call(c, ...) coerces factor to integer, which is undesired
x1 <- x[[1L]]
if (is.factor(x1)) {
structure(unlist(x), class = "factor", levels = levels(x1))
} else {
do.call(c, x)
}
}
library(cfdnakit)
library(cfdnakit)
read_bamfile("/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam",1000)
test_readbam = read_bamfile("/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam",1000)
View(test_readbam)
library(devtools)
load_all()
bamfile_path="/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam"
binsize=1000
blacklist_targets_gr <- create_blacklist_gr()
which <- get_sliding_windows(binsize = binsize)
which_filtered <-
filter_blacklist_regions(which,blacklist_targets_gr)
View(which_filtered)
View(which)
flag <- Rsamtools::scanBamFlag(isPaired = TRUE,
isUnmappedQuery = FALSE,
isDuplicate = FALSE,
hasUnmappedMate = FALSE,
isSecondaryAlignment = FALSE,
isSupplementaryAlignment = FALSE)
param <- Rsamtools::ScanBamParam(what = c("qname", "rname", "pos",
"isize", "qwidth"),
flag = flag,
which = which,
mapqFilter = 20)
bam <- Rsamtools::scanBam(file = bamfile_path,
index = bamfile_path,
param=param)
View(bam)
scanBamWhat()
Rsamtools::scanBamWhat()
test = unname(bam)
View(test)
region_lst = bam[1]
View(region_lst)
for (region_lst in bam) {
View(region_lst)
# test_gr = GenomicRanges::GRanges(seqnames = region_lst)
break
}
region_lst$rname
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
isize = region_lst$isize)
View(test_gr)
blacklist_targets_gr = create_blacklist_gr()
View(blacklist_targets_gr)
blacklist_targets_gr
filtered_gr <- GenomicRanges::setdiff(test_gr,
blacklist_targets_gr)
View(filtered_gr)
filtered_gr
View(test_gr)
View(blacklist_targets_gr)
blacklist_targets_df = as.data.frame(blacklist_targets_gr)
View(blacklist_targets_df)
filtered_df = as.data.frame(filtered_gr)
View(filtered_df)
test_df = as.data.frame(test_gr)
View(test_df)
filtered_gr <- test_gr[! test_gr %in% blacklist_targets_gr]
filtered_gr <- test_gr[!test_gr %in% blacklist_targets_gr]
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
View(filtered_gr)
View(blacklist_targets_df)
test_gr
test_gr[1]
test_gr[2]
filtered_gr
filtered_gr@from
test_remove_gr = test_gr[-filtered_gr@from]
View(test_remove_gr)
test_remove_df = as.data.frame(test_remove_gr)
View(test_remove_df)
View(bam)
flag <- Rsamtools::scanBamFlag(isPaired = TRUE,
isUnmappedQuery = FALSE,
isDuplicate = FALSE,
isMinusStrand = FALSE,
hasUnmappedMate = FALSE,
isSecondaryAlignment = FALSE,
isMateMinusStrand = TRUE,
isNotPassingQualityControls = FALSE,
isSupplementaryAlignment = FALSE)
param <- Rsamtools::ScanBamParam(what = c("qname", "rname", "pos",
"isize", "qwidth"),
flag = flag,
which = which,
mapqFilter = 20)
bam <- Rsamtools::scanBam(file = bamfile_path,
index = bamfile_path,
param=param)
View(bam)
View(test_gr)
region_lst = unlist(bam)[1]
region_lst = bam[1]
# View(region_lst)
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
test_remove_df = as.data.frame(test_remove_gr)
View(test_remove_df)
# View(region_lst)
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
View(filtered_gr)
blacklist_targets_gr
# View(region_lst)
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
test_df = as.data.frame(test_gr)
View(region_lst)
for (region_lst in bam) {
# View(region_lst)
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
break
# filtered_gr <- GenomicRanges::setdiff(test_gr,
#                                       blacklist_targets_gr)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
break
}
View(test_gr)
test_df = as.data.frame(test_gr)
View(test_df)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
View(filtered_gr)
test_remove_gr = test_gr[-filtered_gr@from]
View(test_remove_gr)
test_remove_df = as.data.frame(test_remove_gr)
View(test_remove_df)
View(test_gr)
View(test_remove_df)
View(bam)
return_vec = (qname = test_remove_gr$qname,
rname = test_remove_gr$rname,
pos = test_remove_gr$post,
qwidth = test_remove_gr$qwidth,
isize = test_remove_gr$isize,)
return_vec = ("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize,)
return_vec = c("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize,)
test_remove_gr$qname
return_vec = c("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize,)
return_vec = c("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
return_vec
test_apply_result = sapply(bam, function(region_lst){
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
return_vec = c("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
})
View(test_apply_result)
return_vec = list("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
View(return_vec)
test_apply_result = sapply(bam, function(region_lst){
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
return_vec = list("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
})
View(test_apply_result)
test_apply_result = lapply(bam[1:100], function(region_lst){
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
return_vec = list("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
})
View(return_vec)
View(test_apply_result)
test_apply_result = lapply(bam, function(region_lst){
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
test_remove_gr = test_gr[-filtered_gr@from]
return_vec = list("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
})
View(test_apply_result)
test = sapply(test_apply_result, function(x)length)
View(test)
test = sapply(test_apply_result, function(x)length(x$pos))
test
test = sapply(test_apply_result, function(x)x$pos)
View(test)
test = sapply(test_apply_result, function(x) length(x@pos))
test = sapply(test_apply_result, function(x) print(x)
)
test = sapply(test_apply_result, function(x) length(x$pos))
View(test_df)
test_apply_result$`1:9000001-10000000`
region_lst = bam$`1:9000001-10000000`
View(region_lst)
# View(region_lst)
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
filtered_gr
filtered_gr@from
length(filtered_gr)
length(filtered_gr@from)
test_apply_result = lapply(bam, function(region_lst){
test_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(test_gr,
blacklist_targets_gr)
if(length(filtered_gr@from) == 0 )
test_remove_gr = test_gr
else
test_remove_gr = test_gr[-filtered_gr@from]
return_vec = list("qname" = test_remove_gr$qname,
"rname" = test_remove_gr$rname,
"pos" = test_remove_gr$post,
"qwidth" = test_remove_gr$qwidth,
"isize" = test_remove_gr$isize)
})
View(test_apply_result)
filter_read_on_blacklist <- function(bam_lst){
blacklist_targets_gr <- create_blacklist_gr()
filtered_bam_lst = lapply(bam, function(region_lst){
bin_gr =
GenomicRanges::GRanges(seqnames =
as.character(region_lst$rname),
ranges = IRanges(start = region_lst$pos,
end = region_lst$pos +
region_lst$qwidth),
qname=region_lst$qname,
rname=region_lst$rname,
pos=region_lst$pos,
qwidth=region_lst$qwidth,
isize = region_lst$isize)
filtered_gr <- GenomicRanges::findOverlaps(bin_gr,
blacklist_targets_gr)
if(length(filtered_gr@from) == 0 )
filterd_bam_gr = bin_gr
else
filterd_bam_gr = bin_gr[-filtered_gr@from]
return_vec = list("qname" = filterd_bam_gr$qname,
"rname" = filterd_bam_gr$rname,
"pos" = filterd_bam_gr$post,
"qwidth" = filterd_bam_gr$qwidth,
"isize" = filterd_bam_gr$isize)
})
return(filtered_bam_lst)
}
library(cfdnakit)
read_bamfile(bamfile_path = "/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam",1000)
test_readbam = read_bamfile(bamfile_path = "/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam",1000)
View(test_readbam)
document()
document()
test_readbam = read_bamfile(bamfile_path = "/icgc/dkfzlsdf/analysis/OE0290_projects/pediatric_tumor/whole_genome_sequencing/results_per_pid/OE0290-PED_2LB-055/alignment_umi/plasma-01-01_OE0290-PED_2LB-055_merged.mdup_groupbyUMI_callConsensus_realigned.bam",1000)
View(test_readbam)
devtools::load_all(".")
